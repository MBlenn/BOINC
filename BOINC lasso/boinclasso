#!/usr/bin/bash
# v20240416
#   - use -v to show local & GitHub version
#   - use -p to assign only physical cores (ignoring SMT)
#   - for now deactivated warning if less WUs then L3 complexes are present
#   - update function will overwrite older and same version to allow for multiple updates / fixes per day
# v20240411
#   - use -e to evaluate / suggest good number of threads per WU and total WUs
#   - use -k N to use N core complexes / L3 per WU
# v20240405
#   - dropped pgrep to support long binary/process names
#   - specify multiple apps separated by comma, eg, boinclasso -s milkyway_nbody,ap27_cpu
# v20240327
#   - update mechanism from GitHub added
# v20240326
#	- allow script to loop, then no longer requires cron 
#	- added help
# v20240325
#   - initial version
#

LANG=C
FILENAME=$(dirname $(readlink -f $0))/$(basename -- "$0")

help() {
    echo "Usage:"
    echo "  -l nn       - Loop every nn seconds, no need to run from cron"
    echo "  -s string   - String / process to search for"
    echo "  -k n        - Use n CCX per WU"
    echo "  -h          - This help"
    echo "  -e          - evaluate"
    echo "  -u          - update script from GitHub"
    echo "  -p          - ignore SMT and pin 1 thread per physical core"
    echo "  -v          - show local and GitHub version" 
    exit 0
}

main() {
    processIDs=$(ps -ef | egrep "$(echo $1 | tr ',' '|')" | egrep -v " grep|boinclasso" | awk '{ print $2 }')
    l3Caches=$(lscpu -e | grep -v "CPU" | tr ':' ' ' | awk '{ print $8 }' | sort -u | wc -l)
    numWUs=$(echo ${processIDs} | wc -w)
    threadsPerCore=$(lscpu | awk '/^Thread\(s\) per core:/ { print $4 }')

    if [[ ${numWUs} -gt ${l3Caches} ]]; then
        echo "There are more WUs than L3 complexes, unsupported scenario!"
        #exit 1
    #elif [[ ${numWUs} -lt ${l3Caches} ]]; then
    #    echo "Less WUs than L3 complexes, likely wasting rescources!"
    fi  

    L3counter=0
    for PID in $(echo ${processIDs}); do
        if [[ -z $CCXperWU ]]; then
            grepList=":${L3counter} "
            L3increment=1
            L3counter=$((L3counter+1))
        else
            L3increment=$CCXperWU       
            L3upper=$(((L3counter+L3increment)-1))
            grepList=":$L3counter "
            while [[ $L3counter -lt $L3upper ]]; do
                L3counter=$((L3counter+1))
                grepList="$grepList |:${L3counter} "
            done
            L3counter=$((L3counter+1))
        fi
        
        if [[ $physOnly == "true" ]]; then
            cpuListLines=$(lscpu -e | egrep "${grepList}" | awk '{ print $1 }' | wc -l)
            numFirstCores=$(($cpuListLines/$threadsPerCore))
            cpuList=$(lscpu -e | egrep "${grepList}" | head -${numFirstCores} | awk '{ print $1 }' | xargs | sed 's/ /,/g')
        else
            cpuList=$(lscpu -e | egrep "${grepList}" | awk '{ print $1 }' | xargs | sed 's/ /,/g')
        fi

        if [[ $cpuList == "" ]]; then
            echo "No unassigned L3 for PID ${PID}."
        else
            echo taskset -a -p -c ${cpuList} ${PID}
            taskset -a -p -c ${cpuList} ${PID} > /dev/null
        fi
    done
}

eval() {
    CPUtype=$(awk -F": " '/model name/ { print $2 }' /proc/cpuinfo | sort -u)
    CPUs=$(lscpu | awk '/^CPU\(s\):/ { print $2 }')
    l3Caches=$(lscpu -e | grep -v "CPU" | tr ':' ' ' | awk '{ print $8 }' | sort -u | wc -l)
    l3Size=$(lscpu | awk '/L3 cache:/ { print $3 }')
    echo "CPU:              $CPUtype"
    echo "Log. CPUs:        $CPUs"
    echo "L3 Caches:        $l3Caches"
    echo "L3 size:          $l3Size"
    echo "Ideal # threads   $(($CPUs/$l3Caches))"
    echo "Ideal # WUs       $(($CPUs/$(($CPUs/$l3Caches))))"
    exit 0
}

update_script() {
	if [[ $(id -u) -ne 0 ]]; then
		echo "You need to be root to perform this operation. aborting..."
	else
		script_download="https://raw.githubusercontent.com/MBlenn/BOINC/master/BOINC%20lasso/boinclasso"
		wget -O ${FILENAME}_tmp ${script_download}
		VERSION_OLD=$(awk '/^# v20/ { print $2 }' ${FILENAME} | sed 's/v//' | head -1)
		VERSION_NEW=$(awk '/^# v20/ { print $2 }' ${FILENAME}_tmp | sed 's/v//' | head -1)
		echo "OLD: $VERSION_OLD"
		echo "NEW: $VERSION_NEW"

		if [[ $VERSION_NEW -ge $VERSION_OLD ]]; then
			chmod +x ${FILENAME}_tmp
			mv ${FILENAME}_tmp ${FILENAME}
		else
			echo "Local is same or newer version than on the repo!"
		fi
			
	fi
    exit
}

version() {
    version=$(awk '/^# v20/ { print $2 }' ${FILENAME} | head -1)
    lastVersion=$(lynx -nomargins -dont_wrap_pre --dump https://raw.githubusercontent.com/MBlenn/BOINC/master/BOINC%20lasso/boinclasso | awk '/^# v20/ { print $2 }' ${FILENAME} | head -1)
    echo "Local version:    $version"
    echo "GitHub version:   $lastVersion"
    exit 0
}

while getopts ehuvpl:k:s: opt
do
   case $opt in
        l) loop=$OPTARG; echo "Executing every $loop seconds";;
        s) string=$OPTARG;;
        k) CCXperWU=$OPTARG;;
        h) help;;
        e) eval;;
        u) update_script;;
        p) physOnly=true;;
        v) version;;
        *) help;;
   esac
done

if [[ -z $string ]]; then
    echo "No process defined, can't continue"
    exit 1
fi

if [[ -z $loop ]]; then
    main $string $physOnly
    exit 0
else
    while true; do 
        main $string $physOnly
        sleep $loop
    done
fi